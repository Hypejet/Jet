package net.hypejet.jet.protocol.packet.server.login;

import net.hypejet.jet.protocol.packet.server.ServerLoginPacket;
import org.checkerframework.checker.nullness.qual.NonNull;

import java.util.Arrays;
import java.util.Objects;

/**
 * Represents a {@linkplain ServerLoginPacket server login packet}, which requests an encryption from a Minecraft
 * client.
 *
 * @param serverId an identifier of a server requesting the encryption
 * @param publicKey a public key of a server requesting the encryption
 * @param verifyToken a verify token, which is a random sequence of bytes generated by a server requesting the
 *                    encryption
 * @param shouldAuthenticate whether the client should authenticate with Mojang
 * @since 1.0
 * @author Codestech
 * @see ServerLoginPacket
 */
public record ServerEncryptionRequestLoginPacket(@NonNull String serverId, byte @NonNull [] publicKey,
                                                 byte @NonNull [] verifyToken, boolean shouldAuthenticate)
        implements ServerLoginPacket {
    /**
     * Constructs the {@linkplain ServerEncryptionRequestLoginPacket encryption request login packet}.
     *
     * <p>The public key and verify token arrays are copied to prevent modifications on the record.</p>
     *
     * @param serverId an identifier of a server requesting the encryption
     * @param publicKey a public key of a server requesting the encryption
     * @param verifyToken a verify token, which is a random sequence of bytes generated by a server requesting the
     *                    encryption
     * @param shouldAuthenticate whether the client should authenticate with Mojang
     * @since 1.0
     */
    public ServerEncryptionRequestLoginPacket {
        publicKey = publicKey.clone();
        verifyToken = verifyToken.clone();
    }

    /**
     * Gets a public key of a server requesting the encryption.
     *
     * <p>The public key returned is a copy to prevent modifications of the original array.</p>
     *
     * @return the public key
     * @since 1.0
     */
    @Override
    public byte @NonNull [] publicKey() {
        return this.publicKey.clone();
    }

    /**
     * Gets a verify token, which is a random sequence of bytes generated by a server requesting the encryption.
     *
     * <p>The public key returned is a copy to prevent modifications of the original array.</p>
     *
     * @return the verify token
     * @since 1.0
     */
    @Override
    public byte @NonNull [] verifyToken() {
        return this.verifyToken;
    }

    /**
     * {@inheritDoc}
     */
    // Override, because records do not compare contents of arrays natively
    @Override
    public boolean equals(Object object) {
        if (this == object) return true;
        if (!(object instanceof ServerEncryptionRequestLoginPacket that)) return false;
        return this.shouldAuthenticate == that.shouldAuthenticate
                && Objects.equals(this.serverId, that.serverId)
                && Objects.deepEquals(this.publicKey, that.publicKey)
                && Objects.deepEquals(this.verifyToken, that.verifyToken);
    }

    /**
     * {@inheritDoc}
     */
    // Override, because records do not compare contents of arrays natively
    @Override
    public int hashCode() {
        return Objects.hash(this.serverId, Arrays.hashCode(this.publicKey), Arrays.hashCode(this.verifyToken),
                this.shouldAuthenticate);
    }
}