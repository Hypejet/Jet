package net.hypejet.jet.protocol.packet.clientbound.login.encryption;

import net.hypejet.jet.buffer.NetworkBuffer;
import net.hypejet.jet.protocol.ProtocolState;
import org.checkerframework.checker.nullness.qual.NonNull;

/**
 * Represents an implementation of {@link EncryptionRequestPacket encryption request packet}.
 *
 * @param serverId an identifier of server requesting the encryption
 * @param publicKey a public key of server requesting the encryption
 * @param verifyToken a verify token, which is a random sequence of bytes generated by a server requesting the
 *                    encryption
 * @param shouldAuthenticate whether the client should authenticate with mojang
 *
 * @since 1.0
 * @author Codestech
 * @see EncryptionRequestPacket
 */
record EncryptionRequestPacketImpl(@NonNull String serverId, byte @NonNull [] publicKey, byte @NonNull [] verifyToken,
                                   boolean shouldAuthenticate) implements EncryptionRequestPacket {
    @Override
    public int getPacketId() {
        return 1;
    }

    @Override
    public @NonNull ProtocolState getProtocolState() {
        return ProtocolState.LOGIN;
    }

    @Override
    public void write(@NonNull NetworkBuffer buffer) {
        buffer.writeString(this.serverId);
        buffer.writeByteArray(this.publicKey);
        buffer.writeByteArray(this.verifyToken);
        buffer.writeBoolean(this.shouldAuthenticate);
    }

    /**
     * Represents an implementation of {@link EncryptionRequestPacket.Builder encryption request packet builder}.
     *
     * @since 1.0
     * @author Codestech
     * @see EncryptionRequestPacket.Builder
     */
    static final class Builder implements EncryptionRequestPacket.Builder {

        private String serverId = "";
        private byte[] publicKey = new byte[0];
        private byte[] verifyToken = new byte[0];
        private boolean shouldAuthenticate;

        @Override
        public @NonNull Builder serverId(@NonNull String serverId) {
            this.serverId = serverId;
            return this;
        }

        @Override
        public @NonNull Builder publicKey(byte @NonNull [] publicKey) {
            this.publicKey = publicKey;
            return this;
        }

        @Override
        public @NonNull Builder verifyToken(byte @NonNull [] verifyToken) {
            this.verifyToken = verifyToken;
            return this;
        }

        @Override
        public EncryptionRequestPacket.@NonNull Builder shouldAuthenticate(boolean shouldAuthenticate) {
            this.shouldAuthenticate = shouldAuthenticate;
            return this;
        }

        @Override
        public @NonNull EncryptionRequestPacket build() {
            return new EncryptionRequestPacketImpl(this.serverId, this.publicKey, this.verifyToken,
                    this.shouldAuthenticate);
        }
    }
}