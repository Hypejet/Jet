package net.hypejet.jet.protocol.packet.server.login.encryption;

import net.hypejet.jet.protocol.packet.server.login.ServerLoginPacket;
import org.checkerframework.checker.nullness.qual.NonNull;

/**
 * Represents a {@linkplain ServerLoginPacket server login packet}, which requests an encryption from a Minecraft
 * client.
 *
 * @since 1.0
 * @author Codestech
 * @see ServerLoginPacket
 */
public sealed interface ServerEncryptionRequestPacket extends ServerLoginPacket permits ServerEncryptionRequestPacketImpl {
    /**
     * Gets an identifier of a server requesting the encryption.
     *
     * @return the identifier
     * @since 1.0
     */
    @NonNull String serverId();

    /**
     * Gets a public key of a server requesting the encryption.
     *
     * @return the public key
     * @since 1.0
     */
    byte @NonNull [] publicKey();

    /**
     * Gets a verify token, which is a random sequence of bytes generated by a server requesting the encryption.
     *
     * @return the verify token
     * @since 1.0
     */
    byte @NonNull [] verifyToken();

    /**
     * Gets whether the client should authenticate with Mojang.
     *
     * @return true if the client should authenticate with Mojang, false otherwise
     * @since 1.0
     */
    boolean shouldAuthenticate();

    /**
     * Creates a new {@linkplain Builder encryption request packet builder}.
     *
     * @return the encryption request packet builder
     * @since 1.0
     */
    static @NonNull Builder builder() {
        return new ServerEncryptionRequestPacketImpl.Builder();
    }

    /**
     * Represents a builder that creates a {@linkplain ServerEncryptionRequestPacket encryption request packet}.
     *
     * @since 1.0
     * @author Codestech
     */
    sealed interface Builder permits ServerEncryptionRequestPacketImpl.Builder {
        /**
         * Sets an identifier of a server requesting the encryption.
         *
         * @param serverId the identifier
         * @return the builder
         * @since 1.0
         */
        @NonNull Builder serverId(@NonNull String serverId);

        /**
         * Sets a public key of a server requesting the encryption.
         *
         * @param publicKey the public key
         * @return the builder
         * @since 1.0
         */
        @NonNull Builder publicKey(byte @NonNull [] publicKey);

        /**
         * Sets a verify token, which is a random sequence of bytes generated by a server requesting the encryption.
         *
         * @param verifyToken the verify token
         * @return the builder
         * @since 1.0
         */
        @NonNull Builder verifyToken(byte @NonNull [] verifyToken);

        /**
         * Sets whether the client should authenticate with Mojang.
         *
         * @param shouldAuthenticate true if the client should authenticate with Mojang, false otherwise
         * @return the builder
         * @since 1.0
         */
        @NonNull Builder shouldAuthenticate(boolean shouldAuthenticate);

        /**
         * Builds the {@linkplain ServerEncryptionRequestPacket encryption request packet}.
         *
         * @return the encryption request packet
         * @since 1.0
         */
        @NonNull
        ServerEncryptionRequestPacket build();
    }
}